{"version":3,"sources":["serviceWorker.ts","hooks/userInputHook.ts","hooks/searchableHook.ts","hooks/languagesHook.ts","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","useUserInput","defaultValue","useState","value","setValue","onChange","useCallback","e","target","useSearchable","data","searchText","searchProps","useMemo","regex","RegExp","filter","item","some","sp","test","useLanguages","languages","setLanguages","useEffect","fetch","then","response","json","catch","error","console","log","App","searchableLanguages","l","name","className","placeholder","type","slice","map","key","id","href","encodeURI","rel","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCLSC,EAXM,WAAgC,IAA/BC,EAA8B,uDAAP,GAAO,EACxBC,mBAASD,GADe,mBAC3CE,EAD2C,KACpCC,EADoC,KAG5CC,EAAWC,uBAAY,SAACC,GAAD,OAAOH,EAASG,EAAEC,OAAOL,SAAQ,IAE9D,MAAO,CACLA,QACAE,aCMWI,EAbO,SACpBC,EACAC,EACAC,GAEA,OAAOC,mBAAQ,WACb,IAAMC,EAAQ,IAAIC,OAAOJ,EAAY,KACrC,OAAOD,EAAKM,QAAO,SAACC,GAAD,OACjBL,EAAYK,GAAMC,MAAK,SAACC,GAAD,OAAQL,EAAMM,KAAKD,WAE3C,CAACT,EAAMC,EAAYC,KCMTS,EAfM,WAAO,IAAD,EACSnB,mBAAqB,IAD9B,mBAClBoB,EADkB,KACPC,EADO,KAYzB,OAPAC,qBAAU,WACRC,MAHe,8CAIZC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAChB,GAAD,OAAUa,EAAab,MAC5BmB,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAI,qBAAsB,CAAEF,eACvD,IAEIR,GC+BMW,G,MAvCO,WACpB,IAAMtB,EAAaX,EAAa,IAE1BsB,EAAYD,IAEZa,EAAsBzB,EAC1Ba,EACAX,EAAWR,OACX,SAACgC,GAAD,MAAO,CAACA,EAAEC,SAGZ,OACE,yBAAKC,UAAU,QACb,wBAAIA,UAAU,yBAAd,yBACA,yCACEC,YAAY,2BACZC,KAAK,OACLF,UAAU,4BACN1B,IAGLuB,EAAoBM,MAAM,EAAG,IAAIC,KAAI,SAACN,GAAD,OACpC,uBAAGE,UAAU,cAAcK,IAAKP,EAAEQ,IAChC,uBACEN,UAAU,OACVO,KAAMC,UAAU,mCAAD,OACsBV,EAAEC,KADxB,0BAGf5B,OAAO,SACPsC,IAAI,uBAEHX,EAAEC,aC/BfW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SLgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd3B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM2B,c","file":"static/js/main.7b34bc02.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { useState, useCallback } from \"react\";\n\nconst useUserInput = (defaultValue: string = \"\") => {\n  const [value, setValue] = useState(defaultValue);\n\n  const onChange = useCallback((e) => setValue(e.target.value), []);\n\n  return {\n    value,\n    onChange,\n  };\n};\n\nexport default useUserInput;\n","import { useMemo } from \"react\";\n\nconst useSearchable = <T>(\n  data: T[],\n  searchText: string,\n  searchProps: (item: T) => string[]\n) => {\n  return useMemo(() => {\n    const regex = new RegExp(searchText, \"i\");\n    return data.filter((item) =>\n      searchProps(item).some((sp) => regex.test(sp))\n    );\n  }, [data, searchText, searchProps]);\n};\n\nexport default useSearchable;\n","import Language from \"../types/Language\";\nimport { useState, useEffect } from \"react\";\n\nconst useLanguages = () => {\n  const [languages, setLanguages] = useState<Language[]>([]);\n\n  const endpoint = \"https://api.npoint.io/33d57619ef599fc57a53\";\n\n  useEffect(() => {\n    fetch(endpoint)\n      .then((response) => response.json())\n      .then((data) => setLanguages(data))\n      .catch((error) => console.log(\"catch useLanguages\", { error }));\n  }, []);\n\n  return languages;\n};\n\nexport default useLanguages;\n","import React from \"react\";\nimport useUserInput from \"./hooks/userInputHook\";\nimport useSearchable from \"./hooks/searchableHook\";\nimport useLanguages from \"./hooks/languagesHook\";\n\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  const searchText = useUserInput(\"\");\n\n  const languages = useLanguages();\n\n  const searchableLanguages = useSearchable(\n    languages,\n    searchText.value,\n    (l) => [l.name]\n  );\n\n  return (\n    <div className=\"main\">\n      <h2 className=\"text-center uppercase\">Programming Languages</h2>\n      <input\n        placeholder=\"Search languages here...\"\n        type=\"text\"\n        className=\"search-input text-center\"\n        {...searchText}\n      />\n\n      {searchableLanguages.slice(0, 10).map((l) => (\n        <p className=\"text-center\" key={l.id}>\n          <a\n            className=\"link\"\n            href={encodeURI(\n              `https://www.google.com/search?q=${l.name} programming language`\n            )}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {l.name}\n          </a>\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}